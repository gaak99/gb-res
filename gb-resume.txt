Resume of Glenn T. Barry
========================
GT Barry

Description
-----------

Seeking a software development position in Atlanta (or remote) utilizing
my skills and job experience detailed below.

URLs for this Resume
--------------------

Web site: https://gaak99.github.io/resume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Raw formats including plain text: https://github.com/gaak99/gb-res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Contact
-------

email: gaak99@gmail.com
~~~~~~~~~~~~~~~~~~~~~~~

Computing Technologies
----------------------

https://github.com/gaak99[Github]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Languages
~~~~~~~~~

Bash
^^^^

1.  _autogen.sh_ fix for Remacs project
https://github.com/Wilfred/remacs/pull/882/files/3230c19a5ff410d8c496753b616127ee5a225a09[github
pull request]
2.  _oxmerge_ is a shell wrapper for the _oxly_ common case
https://github.com/gaak99/oxly/blob/master/oxly/scripts/oxmerge.sh[github]
3.  see also Emory link:#emory[below]

C
^

1.  see Sun Microsystems link:#sunmicro[below]

Lisp
^^^^

1.  Clojure
1.  Concurrent recursive "grep" using _Clojure.core.async_ Go-style
channels
https://gist.github.com/gaak99/94305797fe5c81e6f20bd2095ec23152[github]
2.  Basic bloom filter implementation in Emacs Lisp
https://github.com/gaak99/emacs-bloomfilter[github]
+
I used the https://github.com/magnars/dash.el[dash] uber
modern/functional Lisp list library.

Python
^^^^^^

1.  _oxly_ auto-merges Dropbox file revisions with a _git_-like CLI
https://github.com/gaak99/oxly[github]
+
The side project that I put the most time into and use on a regular
basis.
2.  see also Seagate link:#seagate[below]

Rust[multiblock footnote omitted]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  Remacs open source project - "oxidize" (port) C layer of GNU Emacs
to Rust
https://github.com/Wilfred/remacs/blob/master/rust_src/src/dired_unix.rs[github]
+
I [line-through]*ported* re-wrote several low level directory/file
functions from C to Rust.
+
I contributed 98% (as of Aug '18) of the code in the dired Rust files.
+
I used some functional style Rust features here in
https://github.com/Wilfred/remacs/blob/master/rust_src/src/dired_unix.rs[dired
unix.rs] (see function _fattrs to list_ (replace each _spc_ with
_underscore_)).

Operating Systems
~~~~~~~~~~~~~~~~~

Unix
^^^^

1.  Ubuntu Linux
+
My dev laptop runs Ubuntu 16.04. See also Seagate link:#seagate[below].
2.  Solaris / OpenSolaris
+
See Sun Microsystems link:#sunmicro[below].
3.  SmartOS
+
This cloud optimized derivative of OpenSolaris has some unique features
for cloud devops such as DTrace.

Web Frameworks
~~~~~~~~~~~~~~

Flask
^^^^^

1.  see Seagate link:#seagate[below]

Django
^^^^^^

1.  see MeetMeTix link:#mmtix[below]

Cloud Services
~~~~~~~~~~~~~~

AWS S3 API
^^^^^^^^^^

1.  see Seagate link:#seagate[below]

Dropbox API
^^^^^^^^^^^

1.  _oxly_ side project https://github.com/gaak99/oxly[github]

FaunaDB[multiblock footnote omitted] Service API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  _ATL100_ side project https://github.com/gaak99/atl100[github]
2.  _hylisp_ side project
https://github.com/gaak99/faunadb-hylisp[github]

Openstack Swift object storage API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  see Seagate link:#seagate[below]

rsync.net
^^^^^^^^^

1.  ZFS as a Service
+
It's one of my favorite backup services as not only does it provide a
familiar Unix file system interface (via sshfs) but also provides
read-only snapshots several times a day.

Job Experience
--------------

June 2013 - June 2015, Seagate/Evault, San Francisco, CA.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I was one of the first engineers hired to this project that started as a
skunkworks within Evault – a wholly-owned subsidiary of Seagate – and
last half of my tenure there we were brought into Seagate for the new
Cloud Storage division.

It was run like a startup using Agile methodology and
Jira/Confluence/Stash(git server).

Software engineer, Cloud Storage R&D Group.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  The product
1.  LTS2.evault.com - cheaper and faster retrieval (vs AWS Glacier) of
long-term object storage
+
The service was based on Openstack Swift[multiblock footnote omitted]
object storage open source project.
+
Swift is many thousands of lines of Python 2 and is heavily object
oriented. And the code tends to be of high quality as it has many eyes
of Python experts for code review.
+
Swift runs on a Ubuntu cluster (we had one cluster in Salt Lake City and
later added a second one in Oklahoma City).
+
All cluster inter-node messaging was RESTful and gave me a good
(sometimes intense) experience debugging these type services including
down to the Python _WSGI_ module.
+
A teammate wrote a custom user/customer DB that the other services
accessed using SQLAlchemy.
+
My projects:
1.  I "owned" Swift AWS S3 emulation module aka fixed many bugs
2.  Data center to data center object replication performance
improvements
3.  Basic web services with Python Flask - password reset, etc.

Sep 2012 - Jan 2013, MeetMeTix.com, Atlanta, GA.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Contract programmer, Python/Django Web Apps.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  Major Projects:
1.  Single sign-on for the site
+
Integrated/tested/refined Django-Social-Auth app for Facebook single
sign-on feature.
2.  Developed (Python) from scratch a full Selenium automated test
suite.

Oct 2001 - Jun 2012, Sun Microsystems (acquired by Oracle in 2010),
Menlo Park, CA.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Software engineer, Solaris OS/Net Security Technologies.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  Last few projects:
1.  Solaris secure boot feature
+
Refined initial design with an emphasis on next generation SPARC
systems.
2.  Diagnosability improvements of Solaris Secure NFS/SMB (C
development)
3.  Kerberos KDC server db replication (C development)
+
I led team and co-designed/developed RPC-based DB replication
protocol/feature for the Kerberos KDC.
4.  Solaris kernel RPC GSS modules server performance improvements (C
development)
5.  Solaris single sign-on via GSS/Kerberos (C development)

Oct 1996 - Oct 2001, Sun Microsystems.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Software engineer, Solaris Sustaining OS/Net Name Services.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.  Diagnosed/coded/tested fixes (C language) for escalated bugs.

June 1987 - Sep 1996, Emory University MathCS Dept, Atlanta GA.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unix Systems Administrator.

Education
---------

June 1981 - 1987, Georgia Tech, BS in Information and Computer Science.
